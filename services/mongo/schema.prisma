// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/@prisma/mongo-client"
}

// Connection URL: https://www.prisma.io/dataguide/mongodb/connection-uris
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL_MONGO")
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  username String @unique
  password String

  // ProgTopic <created by> User (N:1) --- embeds `userId: string` to ProgTopic
  progTopics_ProgTopicSide ProgTopic[] @relation("prog_topic_created_by_user")

  // User <creates> ProgTopic (1:N) --- embeds `progTopicIds: string[]` to User
  progTopics_UserSide ProgTopic[] @relation("user_creates_prog_topics")
  progTopicIds        String[]    @map("prog_topic_ids") @db.ObjectId
  @@map("user")
}

model ProgTopic {
  // Simple attributes
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String @default("")

  // ProgTopic <has nested> ProgTopic (1:N) --- embeds `parent_id: string` to ProgTopic
  parentId String?     @map("parent_id") @db.ObjectId // null implies that this is a top-level ProgTopic with no parent
  parent   ProgTopic?  @relation("nested_topics", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children ProgTopic[] @relation("nested_topics") // nested topics

  // ProgTopic <created by> User (N:1) --- embeds `userId: string` to ProgTopic
  userId             String @map("user_id") @db.ObjectId
  user_ProgTopicSide User   @relation("prog_topic_created_by_user", fields: [userId], references: [id], onDelete: Cascade) // topic author

  // User <creates> ProgTopic (1:N) --- embeds `progTopicIds: string[]` to User
  user_UserSide User @relation("user_creates_prog_topics", fields: [userId], references: [progTopicIds])

  // ProgTopic <has> ProgSnippet (1:N) --- Embeds `progSnippetIds: string[]` to ProgTopic
  progSnippets_ProgTopicSide ProgSnippet[] @relation("prog_topic_has_prog_snippets")
  progSnippetIds             String[]      @map("prog_snippet_ids") @db.ObjectId

  // ProgSnippet <has> ProgTopic (N:1) --- Embeds `progTopicId: string` to ProgSnippet
  progSnippets_ProgSnippetSide ProgSnippet[] @relation("prog_snippet_has_prog_topic")

  // [Embedded] ProgTopic <has> Tag (N:M)
  tags Tag[]

  @@map("prog_topic")
}

// Embedding tags
type Tag {
  name  String
  color String
}

// Storing tags in an own collection too for easier direct access
model TagDocument {
  // Simple attributes
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  color String

  @@map("tag")
}

model ProgSnippet {
  // Simple attributes
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  headline     String
  content      String
  createdAt    DateTime @default(now()) @map("created_at")
  lastModified DateTime @updatedAt @map("last_modified")
  userEmail    String   @map("user_email")

  // ProgSnippet <has> ProgTopic (N:1) --- Embeds `progTopicId: string` to ProgSnippet
  progTopicId               String    @map("prog_topic_id") @db.ObjectId
  progTopic_ProgSnippetSide ProgTopic @relation("prog_snippet_has_prog_topic", fields: [progTopicId], references: [id], onDelete: Cascade)

  // ProgTopic <has> ProgSnippet (1:N) --- Embeds `progSnippetIds: string[]` to ProgTopic
  progTopic_ProgTopicSide ProgTopic @relation("prog_topic_has_prog_snippets", fields: [id], references: [progSnippetIds])

  // [Embedded] ProgLanguage <has> ProgSnippet (1:N)
  progLanguage ProgLanguage @map("prog_language")

  @@map("prog_snippet")
}

// Embedding languages
type ProgLanguage {
  // Simple attributes
  name    String
  version String
}

// Storing languages in an own collection too for easier direct access
model ProgLanguageDocument {
  // Simple attributes
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  version String

  @@map("prog_language")
}
